#! /bin/bash
export HOME=/root
EmbedMAS_TMP=/tmp/.embedMAS
mkdir -p $EmbedMAS_TMP

while getopts b:d:i:f:g:l:p:r:s:u:-: flag
do
    case "${flag}" in
		b) board=${OPTARG};;
		d) deploy=${OPTARG};;
        i) importLib=${OPTARG};;
		f) file=${OPTARG};;
		g) GIT=${OPTARG};;
		l) log=${OPTARG};;
		p) port=${OPTARG};;
		r) removeLib=${OPTARG};;
		s) sketch=${OPTARG};;
		u) URL=${OPTARG};;
		-) opt=${OPTARG};;
    esac
done

if [ "$board" = "unknown:unknown:unknown" ]; then
	board="arduino:avr:uno"
fi

if [ "$log" = "" ]; then
	log="text"
fi

if [ "$opt" = "help" ]; then
	man chonosFirmwareManager
elif [ "$opt" = "deploy" ]; then
	echo "Upgrading the firmware layer..."
	if [ -n "$file" ] && [ -n "$port" ] && [ -n "$board" ] && [ -e "$file" ] && [ -e "$port" ]; then
		result=`/usr/bin/chonosFirmwareManager -s importingProject -f "$file" -b "$board" -l json | grep "success" | tr -d ' ' | tr -d ',' | xargs | cut -d ":" -f 2`
		if [ "$result" = "true" ]; then
			result=`/usr/bin/chonosFirmwareManager -d importingProject -p "$port" -b "$board" -l json | grep error`
			if [ "$result" = "" ]; then
				echo SUCCESS
			else
				echo ERROR
			fi
		else
			echo "ERROR"
			echo "To verify, execute: chonosFirmwareManager -s testing -f "$file" -b "$board""
		fi
	else
		if [ ! -e "$file" ]; then
			echo "$file does not exist"
		elif [ ! -e "$port" ]; then
			echo "$port does not exist."
		else
			echo " You need define the [FirmwareFile], [SerialPort] and [Board] parameters"
			echo "  example: chonosFirmwareManager –-deploy -f firmware.ino -p /dev/ttyACM0 -b arduino:avr:uno"
			echo " "
			echo " See https://github.com/chon-group/dpkg-chonos-firmwaremng for more information"
		fi
	fi

elif [ "$opt" = "list" ]; then
	# Maintaining compatibility with current chonIDE version
	/usr/bin/chonosFirmwareManager --listBoards
elif [ "$opt" = "listBoards" ]; then
	# Mantendo compatibilidade com versao anterior da chonIDE futuras versões irão retornar em formato text
	if [ "$log" = "text" ]; then
		/usr/bin/arduino-cli board list | grep -e "ttyACM" -e "ttyUSB" > $EmbedMAS_TMP/arduinoboard
		qtd=`cat $EmbedMAS_TMP/arduinoboard | nl | tail -1 | xargs | cut -d " " -f 1`

		echo -n "[" > $EmbedMAS_TMP/json.out
		i=0
		while read -r LINE; do
			port=`echo $LINE | xargs | cut -d " " -f 1`
			fqbn=`echo $LINE | xargs | sed 's,arduino:,:arduino:,g' | sed 's,Unknown,Unknown :unknown:unknown:unknown,g' | cut -d ":" -f 2-4 | cut -d " " -f 1`
			core=`echo $LINE | xargs | sed 's,arduino:,:arduino:,g' | sed 's,Unknown,Unknown :unknown:unknown:unknown:unknown:unknown,g' |cut -d ":" -f 5-6`
			board=`echo $LINE  | xargs | sed 's,USB) ,{,g' | sed 's, arduino:,},g' | cut -d "{" -f 2 | cut -d "}" -f 1`

			echo "{" >> $EmbedMAS_TMP/json.out
				echo "	\"board\": \"$board\"," >> $EmbedMAS_TMP/json.out
				echo "	\"port\" : \"$port\"," >> $EmbedMAS_TMP/json.out
				echo "	\"fqbn\" : \"$fqbn\"," >> $EmbedMAS_TMP/json.out
				echo "	\"core\" : \"$core\"" >> $EmbedMAS_TMP/json.out

			i=$((i+1))
			if [ $i -le $((qtd-1)) ]; then
				echo -n "}," >> $EmbedMAS_TMP/json.out
			else
				echo -n "}" >> $EmbedMAS_TMP/json.out
			fi
		done < $EmbedMAS_TMP/arduinoboard
		echo "]" >> $EmbedMAS_TMP/json.out
		cat $EmbedMAS_TMP/json.out
	else
		/usr/bin/arduino-cli board list --format $log
	fi
	
elif [ "$opt" = "listLibraries" ]; then
	if [ "$log" = "text" ]; then
		list=$(/usr/bin/arduino-cli lib list --format json)
		echo "$list" | jq '[.[] | {name: .library.name}]'
		# ls -l /root/Arduino/libraries/ | grep root > $EmbedMAS_TMP/listLibraries
		# qtd=`cat $EmbedMAS_TMP/listLibraries | nl | tail -1 | xargs | cut -d " " -f 1`
		# echo "[" > $EmbedMAS_TMP/json.out
		# i=0
		# while read -r LINE; do
		# 	librarie=`echo $LINE | xargs | cut -d " " -f 9`

		# 	echo -n "	{" >> $EmbedMAS_TMP/json.out
		# 		echo -n "\"name\": \"$librarie\"" >> $EmbedMAS_TMP/json.out

		# 	i=$((i+1))
		# 	if [ $i -le $((qtd-1)) ]; then
		# 		echo "}," >> $EmbedMAS_TMP/json.out
		# 	else
		# 		echo "}" >> $EmbedMAS_TMP/json.out
		# 	fi
		# done < $EmbedMAS_TMP/listLibraries
		# echo "]" >> $EmbedMAS_TMP/json.out
		# cat $EmbedMAS_TMP/json.out
	else
		/usr/bin/arduino-cli lib list --format $log
	fi
elif [ "$opt" = "importLibrary" ]; then
	if [ "$file" != "" ]; then 
		echo -n "Importing $(basename "$file")"
		if [ -f "$file" ] &&  file "$file" | grep -q "Zip archive data"; then
			echo " [OK]"
			/usr/bin/arduino-cli config init --overwrite > /dev/null
			/usr/bin/arduino-cli config set library.enable_unsafe_install true > /dev/null
			/usr/bin/arduino-cli lib install --zip-path $file | grep -v "flags allow installing untrusted files, use it at your own risk"
			/usr/bin/arduino-cli config set library.enable_unsafe_install false
		else
			echo " [ERROR]"
		fi
	elif [ "$URL" != "" ]; then 
		mkdir -p $EmbedMAS_TMP/firmware/download
		FILENAME=$(basename "$URL")
		echo -n "Downloading library from: $URL"
		curl -L -o "$EmbedMAS_TMP/firmware/download/$FILENAME" "$URL" --silent
		if [ -f "$EmbedMAS_TMP/firmware/download/$FILENAME" ]; then 
			echo " [OK]"
        	/usr/bin/chonosFirmwareManager --importLibrary -f "$EmbedMAS_TMP/firmware/download/$FILENAME"
		else
			echo " [ERROR]"
		fi
	elif [ "$GIT" != "" ]; then
		API_URL="https://api.github.com/repos/$GIT/releases/latest"
		curl -s $API_URL  > $EmbedMAS_TMP/repo.latest
		echo -n "Getting info at $API_URL"
		TAG_NAME=$(cat $EmbedMAS_TMP/repo.latest | grep "tag_name" | head -n 1 | awk -F'["]' '{print $4}')
		if [ "$TAG_NAME" != "" ]; then
			echo " [OK]"
			LATEST_URL="https://github.com/$GIT/archive/refs/tags/$TAG_NAME.zip"
			/usr/bin/chonosFirmwareManager --importLibrary -u "$LATEST_URL"
		else
			echo " [ERROR]"
		fi
	fi
elif [ "$opt" = "removeLibrary" ]; then
	/usr/bin/arduino-cli lib uninstall "$2"
elif [ "$removeLib" != "" ]; then
	# Maintaining compatibility with current chonIDE version
	/usr/bin/chonosFirmwareManager --removeLibrary "$removeLib"
elif [ "$importLib" != "" ]; then
	# Maintaining compatibility with current chonIDE version
	/usr/bin/chonosFirmwareManager --importLibrary -f $importLib

	#	arduino-cli config init --overwrite > /dev/null
	#	arduino-cli config set library.enable_unsafe_install true > /dev/null
	#	arduino-cli lib install --zip-path $importLib | grep -v "flags allow installing untrusted files, use it at your own risk"
	#	arduino-cli config set library.enable_unsafe_install false
elif [ "$sketch" != "" ]; then
	if [ "$file" != "" ]; then
		if [ "$board" != "" ]; then
		    echo " " >> $EmbedMAS_TMP/embeddedMAS.log
			echo "[chonosFirmwareManager] Compiling $file " >> $EmbedMAS_TMP/embeddedMAS.log
			rm -rf /tmp/$sketch
			rm -rf $EmbedMAS_TMP/fimrware-log.out
			/usr/bin/arduino-cli sketch new /tmp/$sketch --format $log --no-color>> $EmbedMAS_TMP/fimrware-log.out
			cp $file /tmp/$sketch/$sketch.ino
			/usr/bin/arduino-cli compile --libraries /root/Arduino/libraries/ --fqbn $board /tmp/$sketch --format $log --no-color >> $EmbedMAS_TMP/fimrware-log.out 2>> $EmbedMAS_TMP/fimrware-log.out
			cat $EmbedMAS_TMP/fimrware-log.out | grep compiler_out | cut -d "\"" -f 4 | sed 's/\\n/\n/g' >> $EmbedMAS_TMP/embeddedMAS.log
			cat $EmbedMAS_TMP/fimrware-log.out | grep compiler_err | cut -d "\"" -f 4 | sed 's/\\n/\n/g' >> $EmbedMAS_TMP/embeddedMAS.log
			cat $EmbedMAS_TMP/fimrware-log.out | grep "\"error\":" | cut -d "\"" -f 4 | sed 's/\\n/\n/g' >> $EmbedMAS_TMP/embeddedMAS.log
			cat $EmbedMAS_TMP/fimrware-log.out
		fi
	fi
elif [ "$deploy" != "" ]; then
	if [ "$board" != "" ]; then
		if [ "$port" != "" ]; then
			echo " " >> $EmbedMAS_TMP/embeddedMAS.log
			echo "[chonosFirmwareManager] Deploying $deploy " >> $EmbedMAS_TMP/embeddedMAS.log
			rm -rf $EmbedMAS_TMP/fimrware-log.out
			/usr/bin/arduino-cli upload --verbose --fqbn $board -p $port /tmp/$deploy --format $log --no-color >> $EmbedMAS_TMP/fimrware-log.out 2>> $EmbedMAS_TMP/fimrware-log.out
			cat $EmbedMAS_TMP/fimrware-log.out | grep stderr | sed 's/\\n/\n/g' | grep "avrdude: "  >> $EmbedMAS_TMP/embeddedMAS.log
			cat $EmbedMAS_TMP/fimrware-log.out | grep error | cut -d "\"" -f 4   >> $EmbedMAS_TMP/embeddedMAS.log
			cat $EmbedMAS_TMP/fimrware-log.out
		fi
	fi
fi
